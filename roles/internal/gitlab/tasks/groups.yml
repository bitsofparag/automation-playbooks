# ------ Check if group or project exists
- name: Gitlab* INCLUDE TASKS set facts for managing "{{ gitlab_group_name or project_name }}"
  include_role:
    name: gitlab
    tasks_from: set-facts
  tags:
    - gitlab_new



# Open issue with this: https://gitlab.com/gitlab-org/gitlab/-/issues/244345
- name: Gitlab* CREATE a new group named "{{ gitlab_group_name }}"
  when: gitlab_group_name != "" and project_name == "" and (group_fact_json is defined and group_fact_json == false)
  uri:
    url: https://gitlab.com/api/v4/groups
    method: POST
    body_format: form-urlencoded
    body:
      name: "{{ gitlab_group_name }}"
      path: "{{ gitlab_group_name }}"
      visibility: "{{ gitlab_privacy }}"
      description: "{{ project_description }}"
    headers:
      Private-Token: "{{ gitlab_user_access_token }}"
    status_code: 201
  tags:
    - gitlab_new


- name: Gitlab* SET_FACT update "group_fact_json"
  when: response.status == 201 and ('json' in response) and response.json.id is defined
  set_fact:
    cacheable: yes
    group_fact_json: "{{ response.json }}"
  tags:
    - gitlab_new


# TODO To do the same for projects:
# "https://gitlab.com/api/v4/projects/\{\{project_fact_json['id'] \}\}/labels?with_counts=true"
- name: Gitlab* CREATE labels for group "{{gitlab_group_name}}"
  when: (group_fact_json is defined and group_fact_json != false)
  uri:
    url: "https://gitlab.com/api/v4/groups/{{ group_fact_json['id'] }}/labels?with_counts=true"
    method: POST
    body_format: form-urlencoded
    body:
      name: "{{ item['name'] }}"
      color: "{{ item['color'] }}"
      description: "{{ item['description'] }}"
    headers:
      Private-Token: "{{ gitlab_user_access_token }}"
    status_code: [201, 409]
  with_items: "{{ gitlab_labels }}"
  ignore_errors: true
  tags:
    - gitlab_new

- name: Gitlab* UPDATE .env file with "{{gitlab_group_name}}" ID
  when: group_fact_json is defined and group_fact_json != false
  replace:
    path: "{{ playbook_dir + '/' + item }}"
    regexp: "^(GITLAB_GROUP_ID=)(.*)"
    replace: '\g<1>{{group_fact_json.id}}'
  with_items:
    - ".env.backend"
    - ".env.{{ project_namespace }}"
  tags:
    - gitlab_new


- name: Gitlab* CREATE deploy token for the group (gitlab-deploy-token)
  when: group_fact_json is defined and group_fact_json != false
  uri:
    url: "https://gitlab.com/api/v4/groups/{{ group_fact_json['id'] }}/deploy_tokens"
    method: POST
    body_format: form-urlencoded
    body:
      id: "{{ group_fact_json['id'] }}"
      name: "gitlab group deploy token"
      username: "gitlab-deploy-token"
      scopes: ["read_repository", "read_registry", "write_registry", "read_package_registry", "write_package_registry"]
    headers:
      Private-Token: "{{ gitlab_user_access_token }}"
    status_code: [201, 200]
  register: response
  tags:
    - gitlab_new
    - gitlab_new


- name: Gitlab* UPDATE .env file with "{{gitlab_group_name}}"s new deploy token
  when: (group_fact_json is defined and group_fact_json != false) and ('json' in response)
  ansible.builtin.replace:
    path: "{{ playbook_dir + '/' + item }}"
    regexp: "^(GITLAB_GROUP_DEPLOY_TOKEN=)(.*)"
    replace: '\1{{response.json.token}}'
  with_items:
    - .env.backend
    - ".env.{{ project_namespace }}"
  tags:
    - gitlab_new


- name: Gitlab* POST group deploy token PASSWORD to {{gitlab_group_name}}'s secrets
  when: (group_fact_json is defined and group_fact_json != false) and ('json' in response)
  uri:
    url: "https://gitlab.com/api/v4/groups/{{group_fact_json.id}}/variables"
    method: POST
    body_format: form-urlencoded
    body:
      id: "{{ group_fact_json['id'] }}"
      key: "CI_DEPLOY_PASSWORD"
      value: "{{ response.json.token }}"
    headers:
      Private-Token: "{{ gitlab_user_access_token }}"
    status_code: [201, 200, 400]
  tags:
    - gitlab_new


- name: Gitlab* POST group deploy token USERNAME to {{gitlab_group_name}} secrets
  when: group_fact_json is defined and group_fact_json != false
  uri:
    url: "https://gitlab.com/api/v4/groups/{{group_fact_json.id}}/variables"
    method: POST
    body_format: form-urlencoded
    body:
      id: "{{ group_fact_json['id'] }}"
      key: "CI_DEPLOY_USER"
      value: "gitlab-deploy-token"
    headers:
      Private-Token: "{{ gitlab_user_access_token }}"
    status_code: [201, 200, 400]
  tags:
    - gitlab_new


# ==========================================================
# Outputs
- name: Gitlab* Group json data
  when: group_fact_json is defined and group_fact_json != false
  debug:
    var: group_fact_json
  ignore_errors: true
  tags:
    - gitlab_debug
    - gitlab_new
    - gitlab_edit
    - gitlab_remove
