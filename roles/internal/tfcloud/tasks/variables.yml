---
# tasks file for roles/internal/tfc (manage vars in workspaces)
# References:
# 1. https://www.terraform.io/docs/cloud/api/index.html#authentication
# 2. https://www.terraform.io/docs/cloud/api/workspace-vars.html
# 3. https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
# 4. https://docs.ansible.com/ansible/latest/modules/set_fact_module.html#examples

# ----------------------------------------------------------
# SET_FACTs before running update operations on variables
# Note that this task file does not include "set-facts.yml"
# like other tasks
# ----------------------------------------------------------
- name: Tfc* INTERRUPT if "deploy_environment" variable is not provided
  when: deploy_environment is not defined or deploy_environment == ""
  ansible.builtin.fail:
    msg: "Please provide the 'deploy_environment' var. For e.g '-e deploy_environment=$ENVIRONMENT'"
  tags:
    - tfc_vars_new
    - tfc_vars_remove
    - tfc_vars_edit
    - tfc_vars_debug
    - tfc_vars_output


- name: Tfc* INTERRUPT if "tfc_workspace_name" variable is not provided
  when: tfc_workspace_name is not defined or tfc_workspace_name == ""
  ansible.builtin.fail:
    msg: |
      "Please provide the 'tfc_workspace_name' (without environment)
      For e.g '-e tfc_workspace_name=foobar'"
  tags:
    - tfc_vars_new
    - tfc_vars_remove
    - tfc_vars_edit
    - tfc_vars_debug
    - tfc_vars_output


- name: Tfc* GET workspace "{{ tfc_workspace_name }}"
  uri:
    url: "https://app.terraform.io/api/v2/organizations/{{ tfc_org_name }}/workspaces/{{ tfc_workspace_name }}-{{ deploy_environment }}"
    method: GET
    headers:
      Authorization: "Bearer {{ tfc_token }}"
      Content-Type: application/vnd.api+json
      Accept: application/json
    return_content: yes
  register: response
  tags:
    - tfc_vars_new
    - tfc_vars_remove
    - tfc_vars_edit
    - tfc_vars_debug
    - tfc_vars_output


- name: Tfc* SET_FACT the ID of "{{tfc_workspace_name}}" in "workspace_id"
  when: ('json' in response) and ('data' in response.json)
  set_fact:
    cacheable: yes
    workspace_id: "{{ response.json.data.id }}"
  tags:
    - tfc_vars_new
    - tfc_vars_remove
    - tfc_vars_edit
    - tfc_vars_debug
    - tfc_vars_output


- name: Tfc* GET list of variables in workspace "{{ tfc_workspace_name }}"
  when: workspace_id is defined
  uri:
    url: "https://app.terraform.io/api/v2/workspaces/{{workspace_id}}/vars"
    method: GET
    headers:
      Authorization: "Bearer {{ tfc_token }}"
      Content-Type: application/vnd.api+json
      Accept: application/json
    return_content: yes
  register: response
  tags:
    - tfc_vars_new
    - tfc_vars_remove
    - tfc_vars_edit


- name: Tfc* SET_FACT list of vars in "{{ tfc_workspace_name }}" ({{workspace_id}})
  when: ('json' in response) and ('data' in response.json)
  set_fact:
    cacheable: yes
    workspace_vars_list: "{{ response.json.data }}"
  tags:
    - tfc_vars_new
    - tfc_vars_remove
    - tfc_vars_edit

# -----------------------------------------------
# Task to create/update group vars from existing workspace
# ----------------------------------------------
- name: Tfc* CREATE group_vars/{{project_namespace}}_{{deploy_environment}}/tfc_{{tfc_workspace_name}}_vars.json
  when: add_environment == "" and workspace_vars_list is defined and (workspace_vars_list|length > 0)
  ansible.builtin.template:
    src: templates/group_vars__tfc_tf_vars.json.j2
    dest: "{{playbook_dir + '/group_vars/' + project_namespace + '_ops/' + deploy_environment + '/tfc_' + tfc_workspace_name + '_vars.json'}}"
    backup: yes
  tags:
    - tfc_vars_edit

- name: Tfc* CREATE group_vars/{{project_namespace}}_{{add_environment}}/tfc_{{tfc_workspace_name}}_vars.json
  when: add_environment != "" and workspace_vars_list is defined and (workspace_vars_list|length > 0)
  ansible.builtin.template:
    src: templates/group_vars__tfc_tf_vars.json.j2
    dest: "{{playbook_dir + '/group_vars/' + project_namespace + '_ops/' + add_environment + '/tfc_' + tfc_workspace_name + '_vars.json'}}"
    backup: yes
  tags:
    - tfc_vars_edit

- name: Tfc* PAUSE to update ops group_vars (same environment)
  when: add_environment == "" and workspace_vars_list is defined and (workspace_vars_list|length > 0)
  pause:
    prompt: |
      Please update values in group_vars/{{project_namespace}}_ops/{{deploy_environment}}/tfc_{{tfc_workspace_name}}_vars.json

      Press Enter when completed:
  tags:
    - tfc_vars_edit

- name: Tfc* PAUSE to update ops group_vars (cross environment)
  when: add_environment != "" and workspace_vars_list is defined and (workspace_vars_list|length > 0)
  pause:
    prompt: |
      Please update values in group_vars/{{project_namespace}}_ops/{{add_environment}}/tfc_{{tfc_workspace_name}}_vars.json

      Press Enter when completed:
  tags:
    - tfc_vars_edit

# -----------------------------------------------
# Task to remove all vars
# -----------------------------------------------
- name: Tfc* DELETE all vars in workspace "{{ tfc_workspace_name }}"
  when: workspace_vars_list is defined and (workspace_vars_list|length > 0)
  uri:
    url: "https://app.terraform.io/api/v2/workspaces/{{workspace_id}}/vars/{{item.id}}"
    method: DELETE
    headers:
      Authorization: "Bearer {{ tfc_token }}"
      Content-Type: application/vnd.api+json
      Accept: application/json
    status_code: [201, 204, 404]
    return_content: yes
  with_items: "{{ workspace_vars_list }}"
  register: response
  tags:
    - tfc_vars_remove


# -------------------------------------------
# Tasks for adding new env vars
# -------------------------------------------
- name: Tfc* TEMPLATE the POST payload for user's TfCloud ENV VARS
  when: tfc_env_vars is defined and (tfc_env_vars|length > 0)
  set_fact:
    tfc_env_vars_rendered: "{{ lookup('template', 'tfc_env_vars.json.j2') | to_json}}"
  tags:
    - tfc_vars_new
    - tfc_vars_edit


- name: Tfc* POST the payload as user's ENV VARS to workspace "{{ tfc_workspace_name }}"
  when: tfc_env_vars_rendered is defined and (tfc_env_vars_rendered|length > 0)
  uri:
    url: "https://app.terraform.io/api/v2/workspaces/{{workspace_id}}/vars"
    method: POST
    headers:
      Authorization: "Bearer {{ tfc_token }}"
      Content-Type: application/vnd.api+json
      Accept: application/json
    body: "{{ item }}"
    body_format: 'json'
    status_code: [201, 200, 422]
    return_content: yes
  with_items: "{{ tfc_env_vars_rendered }}"
  register: response
  tags:
    - tfc_vars_new


# -------------------------------------------
# Tasks for adding new TF vars
# -------------------------------------------
- name: Tfc* TEMPLATE a payload file for user's TfCloud terraform vars
  when: tfc_tf_vars is defined and (tfc_tf_vars|length > 0)
  set_fact:
    tfc_tf_vars_rendered: "{{ lookup('template', 'tfc_tf_vars.json.j2') | to_json }}"
  tags:
    - tfc_vars_new
    - tfc_vars_edit

- name: Tfc* POST the payload file as user's terraform vars to workspace "{{ tfc_workspace_name }}"
  when: tfc_tf_vars_rendered is defined and (tfc_tf_vars_rendered|length > 0)
  uri:
    url: "https://app.terraform.io/api/v2/workspaces/{{workspace_id}}/vars"
    method: POST
    headers:
      Authorization: "Bearer {{ tfc_token }}"
      Content-Type: application/vnd.api+json
      Accept: application/json
    body: "{{ item }}"
    body_format: 'json'
    status_code: [201, 200, 422]
    return_content: yes
  with_items: "{{ tfc_tf_vars_rendered }}"
  tags:
    - tfc_vars_new


# -----------------------------------------------------
# Tasks for getting value of specified variable via API
# -----------------------------------------------------
- name: Tfc* INTERRUPT if "tfc_org_name" variable is not provided
  when: tfc_org_name == ""
  ansible.builtin.fail:
    msg: "Unfortunately 'tfc_org_name' var is needed for this API"
  tags:
    - tfc_vars_debug


- name: Tfc* GET value of specified var {{ tfc_var_name }}
  when: tfc_var_name is defined and tfc_var_name != ""
  uri:
    url: "https://app.terraform.io/api/v2/vars?filter%5Borganization%5D%5Bname%5D={{tfc_org_name}}&filter%5Bworkspace%5D%5Bname%5D={{tfc_workspace_name}}-{{deploy_environment}}"
    headers:
      Authorization: "Bearer {{ tfc_token }}"
      Content-Type: application/vnd.api+json
      Accept: application/json
  register: response
  tags:
    - tfc_vars_debug


- name: Tfc* SET_FACT value of specified var {{ tfc_var_name }} as "var_value"
  when: tfc_var_name is defined and tfc_var_name != ""
  set_fact:
    cacheable: yes
    var_value: "{{ response.json.data | json_query(query) | first | default('') }}"
  vars:
    query: "[?attributes.key=='{{ tfc_var_name }}'].attributes.value"
  tags:
    - tfc_vars_debug


- name: Tfc* DEBUG "var_value" for workspace var {{ tfc_var_name }}
  when: var_value is defined
  debug:
    var: var_value
  tags:
    - tfc_vars_debug


# -----------------------------------------------------
# Tasks for getting value of specified variable via CLI
# -----------------------------------------------------
